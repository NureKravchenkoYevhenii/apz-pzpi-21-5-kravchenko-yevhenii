1 ОГЛЯД ЗАГАЛЬНОЇ АРХІТЕКТУРИ СИСТЕМИ ТА ПРИЙНЯТИХ ІНЖЕНЕРНИХ РІШЕНЬ

IoT-частина програмної системи «Parky» розроблена на основі платформи Arduino з використанням мови програмування С++. Були використані наступні компоненти: плата NodeMCU V3, серводвигун SG-90 та камера ESP32-CAM.
Для взаємодії між сервером та IoT приладами було розроблено Windows Forms комп’ютерну програму «GateController» та ряд команд для управління IoT приладами. Фрагменти коду реалізації IoT-частини наведено у додатку Б.
«GateController» має двошарову архітектуру (Domain та BLL) та використовує Windows Forms у якості інтерфейсу. «Domain» містить моделі, які використовуються у застосунку. У «Infrastructure» знаходяться моделі конфігурації, DI контейнер та перерахування. «BLL» містить необхідні для функціонування застосунку сервіси.
Обидва IoT застосунки («Camera» та «Gate») також мають двошарову архітектуру з поділом на рівні Domain та BLL. Domain містить моделі, а BLL –необхідні сервіси. Також у проектах присутній файл main.cpp, який виконується на платах.

2 ПОБУДОВА UML ДІАГРАМИ ПРЕЦЕНДЕНТІВ

На діаграмі прецендентів можна побачити наступних акторів: адміністратор парковки, користувач, камера та шлагбаум.
Адміністратор парковки може авторизуватися та налаштувати систему управління шлагбаумом. Користувач має змогу заїхати на парковку та виїхати з неї. Камера фотографує номер авто та за допомогою запиту на зовнішнє API здійснюється розпізнавання номер. Далі відбувається перевірка наявності авто у системі і, якщо авто наявне, шлагбаум відкриває проїзд. Шлагбаум у свою чергу може відкривати та закривати проїзд на парковку.

3 ПОБУДОВА UML ДІАГРАМИ ВЗАЄМОДІЇ

На діагрмі взаємодії описано процес обміну даними в системі.
На рисунку бачимо, що процес починається з авторизації адміністратора парковки у комп’ютерній програмі після чого відбувається ініціалізація камери та шлагбаума. Система готова до роботи і очікує на появу авто. Коли біля шлагбаума з’являється авто, камера фотографує його та надсилає зображення на комп’ютерну програму. Програма у свою чергу надсилає зображення на API для розпізнавання номерів автомобілів та отримує номер у відповідь. Далі комп’ютерна програма робить запит на сервер для перевірки наявності авто у системі. Якщо автомобіль є у системі, то шлагбаум відкривається і водій може проїхати. На кінець, шлагбаум закривається і система очікує наступний автомобіль.

4 ПОБУДОВА UML ДІАГРАМИ ДІЯЛЬНОСТІ

На діаграмі дільності бачимо потік дій, які виконують IoT-пристрої. 
На початку адміністратор парковки авторизується у комп’ютерній програмі. Далі відбувається ініціалізація камери та шлагбаума. На цьому етапі система готова до роботи та очікує пояку автомобіля. Після того як авто з’являється перед шлагбаумом камера робить фото. Далі це фото оброблюється та відбувається перевірка чи наявне авто у системі. Якщо автомобіль наявний у системі, відкривається проїзд і водій може заїхати на парковку. Після цього шлагбаум закривається, а система очікує наступне авто.

5 ПОБУДОВА UML ДІАГРАМИ КОМПОНЕНТІВ

Шляхом використання діаграми компонентів була відображена структура IoT-частини системи, а також показано зв’язки та залежності між її складовими елементами. З діаграми видно, що камера та шлагбаум спілкуються з комп’ютерною програмою «GateController» через COM-port. «GateController» має ряд компонентів: «Client», який взаємодіє із сервером через відповідне API та із IoT-приладами через «SerialClient», «AuthService» та «ParkingSessionService», які залежать від «Client».

ВИСНОВКИ

У результаті виконання лабораторної роботи була розроблена IoT-частина програмної системи для управління парковками житлових комплексів та офісів. Крім того були створені наступні діаграми: UML діаграма прецендентів, UML діаграма взаємодії, UML діаграма діяльності та UML діаграма компонентів.
